####################################################################################################
# 10. Jobs & Signals
####################################################################################################

####################################################################################################
# 10.1 Jobs
####################################################################################################

If the MONITOR option is set, an interactive shell associates a job with each pipeline.
It keeps a table of current jobs, printed by the jobs command, and assigns them small integer numbers.
When a job is started asynchronously with ‘&’, the shell prints a line to standard error which looks like:


 	
[1] 1234
indicating that the job which was started asynchronously was job number 1 and had one (top-level) process, whose process ID was 1234.

If a job is started with ‘&|’ or ‘&!’, then that job is immediately disowned. After startup, it does not have a place in the job table, and is not subject to the job control features described here.

If you are running a job and wish to do something else you may hit the key ^Z (control-Z) which sends a TSTP signal to the current job: this key may be redefined by the susp option of the external stty command. The shell will then normally indicate that the job has been ‘suspended’, and print another prompt. You can then manipulate the state of this job, putting it in the background with the bg command, or run some other commands and then eventually bring the job back into the foreground with the foreground command fg. A ^Z takes effect immediately and is like an interrupt in that pending output and unread input are discarded when it is typed.

A job being run in the background will suspend if it tries to read from the terminal. Background jobs are normally allowed to produce output, but this can be disabled by giving the command ‘stty tostop’. If you set this tty option, then background jobs will suspend when they try to produce output like they do when they try to read input.

When a command is suspended and continued later with the fg or wait builtins, zsh restores tty modes that were in effect when it was suspended. This (intentionally) does not apply if the command is continued via ‘kill -CONT’, nor when it is continued with bg.

There are several ways to refer to jobs in the shell. A job can be referred to by the process ID of any process of the job or by one of the following:

%number
The job with the given number.

%string
Any job whose command line begins with string.

%?string
Any job whose command line contains string.

%%
Current job.

%+
Equivalent to ‘%%’.

%-
Previous job.

The shell learns immediately whenever a process changes state.
It normally informs you whenever a job becomes blocked so that no further progress is possible.
If the NOTIFY option is not set, it waits until just before it prints a prompt before it informs you.
All such notifications are sent directly to the terminal, not to the standard output or standard error.

When the monitor mode is on, each background job that completes triggers any trap set for CHLD.

When you try to leave the shell while jobs are running or suspended, you will be warned that ‘You have suspended (running) jobs’.
You may use the jobs command to see what they are. If you do this or immediately try to exit again, the shell will not warn you a second time;
the suspended jobs will be terminated, and the running jobs will be sent a SIGHUP signal, if the HUP option is set.

シェルが実行中のジョブを停止させないようにするには、`nohup'コマンドか組み込みの`disown'を使う。

####################################################################################################
# 10.2 Signals
####################################################################################################

The INT and QUIT signals for an invoked command are ignored if the command is followed by ‘&’ and the MONITOR option is not active.
The shell itself always ignores the QUIT signal. 
Otherwise, signals have the values inherited by the shell from its parent (but see the TRAPNAL special functions in Functions).

This document was generated by Peter Stephenson on June 1, 2009 using texi2html 1.82. 

